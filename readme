Single header version of the libco (https://github.com/SasLuca/libco).

Define LIBCO_IMPLEMENTATION in order to include the implementation.

Forked from https://github.com/edsiper/flb_libco and https://byuu.org/projects/libco

Options:

#define LIBCO_MP -> allow the use thread_local.

#define LIBCO_NO_SSE -> provides a substantial speed-up on Win64 only but it will trash XMM registers. Only use this if you are sure your application or it's dependencies don't use SSE explicitly.

#define LIBCO_MPROTECT -> On [amd64, arm, ppc, x86] this will enable the use of mprotect instead of marking co_swap_function as a text (code) section.

Example:

#define LIBCO_IMPLEMENTATION
#include "stdlib.h"
#include "stdio.h"
#include "libco.h"

cothread_t main_cothread; // main_thread

void my_entry()
{
    int i = 0;
    while (1)
    {
        printf("%d\n", i++);
        
        // Yield to main cothread
        co_switch(main_cothread);
    }
}

int main()
{
    // Get reference to the main cthread
    main_cothread = co_active();

    // Init separate cothread
    size_t actual_size = 0;
    size_t request_size = 1 * 1024 * 1024;
    cothread_t other_cothread = co_create(request_size, my_entry, &actual_size);
    
    // Yield to the cothread
    co_switch(other_cothread);
    co_switch(other_cothread);
    co_switch(other_cothread);
    
    // Delete the other cothread
    co_delete(other_cothread);
}
